services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"  # Optional, remove if not needed externally
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Runs table creation script
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6.0
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
    ports:
      - "27017:27017"  # Optional, for local access
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # Runs on first startup
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: rabbitmq:4.0.7-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"   # RabbitMQ broker
      - "15672:15672" # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
    
  user_service:
    build:
      context: ./UserService  # Path to User Service Dockerfile
    container_name: user_service
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${DB_NAME}
    ports:
      - "3000:3000"
    env_file:
      - .env
    user: "999:999"

  event_service:
    build:
      context: ./EventService
    container_name: event_service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${MONGO_PORT}
      DB_HOST: ${MONGO_HOST}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "5000:5000"
    env_file:
      - .env
    user: "999:999"

  payment_service:
    build:
      context: ./PaymentService
    container_name: payment_service
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
    ports:
      - "5001:5001"
    env_file:
      - .env
    user: "999:999"

  booking_service:
    build:
      context: ./BookingService
    container_name: booking_service
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      payment_service:
        condition: service_started
      event_service:
        condition: service_started
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      PAYMENT_SERVICE_URL: ${PAYMENT_SERVICE_URL}
      EVENT_SERVICE_URL: ${EVENT_SERVICE_URL}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "5002:5002"
    env_file:
      - .env
    user: "999:999"

  notification_service:
    build:
      context: ./NotificationService/notification-service
    container_name: notification_service
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    env_file:
      - .env
    ports:
      - "5003:5003"
    user: "999:999"

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data: