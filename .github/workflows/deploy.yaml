name: Terraform â†’ Kubernetes Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yaml'
      - 'kubernetes/**'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve \
            -var="key_name=${{ secrets.EC2_KEY_NAME }}" \
            -var="instance_type=t2.micro" \
            -var="desired_capacity=2" \
            -var="max_size=4" \
            -var="min_size=1" \
            -var="allowed_ssh_cidr=0.0.0.0/0"

      - name: Export Terraform Outputs
        run: terraform output -json > tf-outputs.json

      - name: Upload TF Outputs
        uses: actions/upload-artifact@v4
        with:
          name: tf-outputs
          path: ./terraform/tf-outputs.json

  deploy:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download TF Outputs
        uses: actions/download-artifact@v4
        with:
          name: tf-outputs
          path: ./terraform

      - name: Write EC2 SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Generate Ansible Inventory
        run: |
          echo "=== tf-outputs.json ==="
          cat ./terraform/tf-outputs.json

          echo "=== Parsing IPs ==="
          IPS=$(jq -r '.instance_ips.value[]' ./terraform/tf-outputs.json)

          mkdir -p ansible
          echo "[app_servers]" > ansible/inventory.ini
          for ip in $IPS; do
            echo "$ip ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/ec2_key.pem" >> ansible/inventory.ini
          done

          echo "=== Final Inventory ==="
          cat ansible/inventory.ini

      - name: Install Ansible & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          pip3 install ansible

      - name: Install Galaxy Roles
        working-directory: ./ansible
        run: |
          if [ -f requirements.yml ]; then
            ansible-galaxy install -r requirements.yml
          fi

      - name: Run Ansible Playbooks
        run: |
          ansible-playbook \
            -i ansible/inventory.ini \
            ansible/playbooks/site.yml \
            --forks 10 \
            --ssh-extra-args='-o StrictHostKeyChecking=no'

      - name: Sync ArgoCD App
        run: |
          sleep 60
          kubectl --kubeconfig=/home/ec2-user/.kube/config \
            apply -f kubernetes/argocd-app.yaml
