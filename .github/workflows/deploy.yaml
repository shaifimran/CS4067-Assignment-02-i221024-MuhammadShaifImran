name: Terraform-Ansible-ArgoCD Deployment

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: 'Terraform Init'
        run: terraform init -input=false

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve

      - name: 'Save Terraform outputs'
        run: terraform output -json > tf-outputs.json

      - name: 'Upload Terraform outputs'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: tf-outputs.json
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: 'Deploy via Ansible and ArgoCD'
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Download Terraform outputs'
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: .

      - name: 'Parse Terraform outputs'
        run: |
          echo "Terraform outputs:"
          cat tf-outputs.json
          EC2_IP=$(jq -r '.ec2_public_ip.value' tf-outputs.json)
          echo "Parsed EC2 IP: $EC2_IP"

      - name: 'Configure EC2 with Ansible'
        run: |
          ansible-playbook -i inventory.ini playbook.yml --extra-vars "host=$EC2_IP"

      - name: 'Deploy application with ArgoCD'
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASS }} --insecure
          argocd app sync my-app
