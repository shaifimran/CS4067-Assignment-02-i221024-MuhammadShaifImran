name: Terraform â†’ Kubernetes Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yaml'
      - 'manifests/**'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve \
            -var="key_name=${{ secrets.EC2_KEY_NAME }}" \
            -var="instance_type=t2.micro" \
            -var="desired_capacity=2" \
            -var="max_size=4" \
            -var="min_size=1" \
            -var="allowed_ssh_cidr=0.0.0.0/0"

      - name: Export & Clean TF Outputs
        run: |
          terraform output -json > tf-raw.json
          # Remove any non-JSON first line (runner echo)
          tail -n +2 tf-raw.json > tf-outputs.json

      - name: Upload TF Outputs
        uses: actions/upload-artifact@v4
        with:
          name: tf-outputs
          path: ./terraform/tf-outputs.json     # upload from terraform/
          if-no-files-found: error              # fail early if missing

  deploy:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download TF Outputs
        uses: actions/download-artifact@v4
        with:
          name: tf-outputs
          path: .                                # drop tf-outputs.json into repo root

      - name: Write EC2 SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Generate Ansible Inventory
        run: |
          set -e

          echo "=== Raw tf-outputs.json ==="
          cat tf-outputs.json

          # Clean to only JSON object between first { and last }
          sed -n '/{/,$p' tf-outputs.json | sed '$!b;/:/!b' > tf-clean.json
          # (or simpler: sed -n "1,/}/p" tf-outputs.json > tf-clean.json)

          echo "=== Clean tf-clean.json ==="
          cat tf-clean.json

          echo "=== Parsing IPs ==="
          IPS=$(jq -r '.instance_ips.value[]' tf-clean.json)

          echo "=== Writing ansible/inventory.ini ==="
          mkdir -p ansible
          cat > ansible/inventory.ini <<EOF
          [app_servers]
          $(for ip in $IPS; do
              echo "$ip ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/ec2_key.pem"
            done)
          EOF

          echo "=== inventory.ini ==="
          cat ansible/inventory.ini

      - name: Install Ansible & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          pip3 install ansible

      - name: Install Galaxy Roles
        working-directory: ./ansible
        run: |
          if [ -f requirements.yml ]; then
            ansible-galaxy install -r requirements.yml
          fi

      - name: Run Ansible Playbooks
        run: |
          ansible-playbook \
            -i ansible/inventory.ini \
            ansible/playbooks/site.yml \
            --forks 10 \
            --ssh-extra-args='-o StrictHostKeyChecking=no'

      - name: Sync ArgoCD App
        run: |
          sleep 60
          kubectl --kubeconfig=/home/ec2-user/.kube/config \
            apply -f manifests/argocd-app.yaml
