---
- name: Bootstrap Argo CD + NGINX Ingress Controller on EKS
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    eks_cluster: event-booking-cluster
    eks_region: us-west-2

  tasks:
    - name: Update kubeconfig for EKS
      command: >
        aws eks update-kubeconfig
        --region {{ eks_region }}
        --name {{ eks_cluster }}

    - name: Wait for all nodes to be Ready
      shell: |
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Ensure namespaces exist
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item }}"
        state: present
      loop:
        - argocd
        - ingress-nginx

    - name: Add ingress-nginx Helm repo
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Install NGINX Ingress Controller via Helm
      kubernetes.core.helm:
        name: nginx-ingress
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: false
        values:
          controller:
            service:
              type: NodePort
              nodePorts:
                http: 32080
                https: 32443
        wait: true
        timeout: 600


    - name: Install Argo CD manifests into argocd namespace
      kubernetes.core.k8s:
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        state: present

    - name: Debug ArgoCD server if it doesnâ€™t start cleanly
      shell: |
        echo "=== Pods in argocd namespace ==="
        kubectl get pods -n argocd -o wide
        echo "=== Describe argocd-server pod ==="
        POD=$(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}')
        kubectl describe pod $POD -n argocd
        echo "=== Logs from argocd-server container ==="
        kubectl logs deployment/argocd-server -n argocd
      register: argocd_debug
      failed_when: false
      changed_when: false

    - name: Wait for Argo CD server to rollout successfully
      shell: |
        kubectl rollout status deployment/argocd-server -n argocd --timeout=300s
